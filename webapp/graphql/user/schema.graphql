type Query {
    user(id: ID, pseudo: String, login: String): User
    currentUser: User
    users(data: UsersInput): [User]
}

input UsersInput {
    excludeCurrentUser: Boolean
}

input SigninInput {
    pseudo: String
    email: String
    password: String!
}

input SignupInput {
    pseudo: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    id: ID!
    pseudo: String
    firstname: String
    lastname: String
    sex:SEX
    latitude: Float
    longitude: Float
    age: Int
    description: String
    nationality: String
    kindOfTrip: TransportType
    isVisibled: Boolean
    photo:String
}

enum SEX {
    MAN
    WOMAN
    OTHER
}

enum TransportType {
    BIKE
    BACKPACK
    TRAIN
    CAR
    ERASMUS
    NOMAD
    OTHER
}

input UpdateCurrentUserInput {
    pseudo: String
    firstname: String
    lastname: String
    sex:SEX
    latitude: Float
    longitude: Float
    age: Int
    description: String
    nationality: String
    kindOfTrip: TransportType
    isVisibled: Boolean
    photo: String
}

type Mutation {
    updateUser(data: UpdateUserInput): User
    updateCurrentUser(data: UpdateCurrentUserInput): User
    deleteUser(id: ID!): User
    signin(data: SigninInput): User
    signup(data: SignupInput): User
}

type User {
    id: ID
    pseudo: String
    email: String
    jwt: String
    firstname: String
    lastname: String
    sex:SEX
    latitude: Float
    longitude: Float
    age: Int
    description: String
    nationality: String
    kindOfTrip: TransportType
    isVisibled: Boolean
    photo:String
}


